Hey, so yeah listen up !

You know MERN stack right ? Were M is for MongoDB, E is for express, R is for React and N is for Node..
Okay.. so.. MongoDB is used for data storage and React is a library for UI or frontend, but what about the other two ?

What is Node ?
You might've heard that Node is a runtime environment for javascript, But.. what does it mean..?
I'm trying to simplify things a bit and I'll need to go a little down on the actual facts for the sake of clarity, because that's what matters here in this context. 
So ig you must be familiar with Chrome. Chrome is a software application, and like any other software, it's built using code, lots of it â€“ billions of lines of code organized into numerous directories or modules.
One crucial component of Chrome's codebase is the V8 engine, which handles the main content and is written in C++. You can think of this code as containing everything required to create and execute files on a server.
Now, in web development, JavaScript is the primary language of choice. However, since the V8 engine's code is in C++, the creators of Node.js took the V8 engine's code and wrapped it with a JavaScript (JS) layer. 
This JS layer allows Node.js to bridge the gap between JavaScript and the server-side code derived from Chrome's V8 engine. I hope this diagram helps you.
So, when you run a .js file with Node.js in the terminal, it doesn't precisely 'compile' the code in the traditional sense. Instead, it interprets and executes the JavaScript code, providing an output very similar to a virtual server. 
So this is why Node.js is called a runtime environment. It enables JavaScript, primarily used in web development, to work on servers, bridging the gap between JavaScript and server-side code, making server operations feel like a virtual server.

BONUS: Now what is NPM ?
Originally, NPM stood for Node Package Manager, serving as a repository for Node.js-related packages and their management.
However, over time, NPM evolved into much more than just a package manager for Node.js. It transformed into a comprehensive repository for packages across various development domains.
As a result, the original full form of NPM became somewhat redundant. Despite this, the acronym 'NPM' remained unchanged due to its fame. 
However, the full form of NPM now varies humorously and creatively. 
Some examples include 'Note: Purchase Milk,' 'Non Productive Monday,' 'Not Particularly Meaningful,' and even 'Nahi Pata Mujhe' (a Hindi phrase meaning 'I don't know'). 
You can find more such reinterpretations in the GIF of the website I've attached below for you. To read more of them you can check out their git repository here: 

And finally ! What is express ?
So Express.js is a package that can be downloaded from npm, refer to the attached GIF. For a minute, think of your web application as a city with many attractions, such as user profiles, shopping carts, and blog posts. 
Express.js provides the organized roadways, traffic rules, and signs that allow users (represented by web requests) to smoothly move between these attractions. 
Express simplifies the process of handling incoming requests, routing them to the appropriate destinations, and managing the flow of data.  While it's technically possible to build a web application without it, doing so would likely involve significantly more code, complexity, and effort. 
Express.js simplifies this process by providing a pre-built framework for managing routes, requests, and responses, making web development faster and more efficient.
You can also use the HTTP functionality of Node for utilizing all capibilities of server, but we generally use expreses becuase it makes all those things very much easier, and you have to write a lot less and a lot simple code for that thing.
Som node has all the power of the V8 engine to create a server, but to easily use its functionalities, we use Express.js with it.

And And And MongoDB ?

Well MongoDB is a database. 
Some important points:
Code ----> MongoDB
setup a database ----> database is created
create a model ----> a collection is created
create a schema ----> a document is created

A database has all data of a company. It is the biggest or the outermost container of data storage. And the smallest one is a document. The collection of these documents is called, umm, a collection. Simple ??

Okay, then what's Mongoose ?
Mongoose is used to connect your backed, i.e., the node/express code to the database..

You need to install MongoDB from the website (community edition -> community server)
And for mongoose you can just say, npm I mongoose.

Plus there is also a simpler way to setup your express app, and that uses express generator, you can use it first by globally installing it with: npm i express-generator -g.
express appname --view=ejs.

This will create an express app and you can use a language similar to HTML, called EJS. You can think of it as the html for Backend. All your rendering pages will be in the views folder. All your routes will be in the routes folder. All your assets like the images, styles, and even the scripts stays in the public folder. I might write another blog about it someday coz it's a big topic in itself tbh.

The code related to Databases is often asynchronous, if you don't know a lot about async code then you refer my blog on it, if you feel like. In short async code is the part of your like, a function, that depends on something outside your code. So whenever the compiler/interpreter encounters async code, it pushes the async part to the side stack of the function's scope and proceeds to the next line, and finishes the execution of all the synchronised code, i.e., the normal code. When all the sync code is finished, it returns to the side stack and bring the async code to the main stack and execute that.
But you might not want this to always happen, and in case you want your async code to be executed the moment it's encountered, just put the word "await" in front of that code fragment, and put "async" in front of the function declaration.
To temporarily save data, you use:
Cookies on the Client Side
and Sessions on the Server Side.

install session functionality using 
npm i express-session

install cookie functionality using
npm i cookie-parser

flash messages are errors or little warnings that are sent by the server to the frontend mostly in case of mismatch of data.

npm i connect-flash

we can't use connect-flash without express-session

whatever is written in app.use runs everytime in every route 
flash messages is the only way to send the data or to use the data, of one route in some another route..

Now what about protected routes and all ?
We use passport.js for that
passport is used for the basic authentication-authorization
now there are several strategies or login methods, for username-password method, you can use passport-local
and then for encryption decryption etc you use passport-mongoose